"use strict";
/*--------------------------------------------------------------------------

MIT License

Copyright (c) corsa 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
class ReadableIterator {
    constructor(readable) {
        this.readable = readable;
    }
    next() {
        const value = this.readable.read();
        const done = false;
        return { value, done };
    }
}
exports.ReadableIterator = ReadableIterator;
class ReadableAsyncIterator {
    constructor(readable) {
        this.readable = readable;
    }
    async next() {
        const next = await this.readable.read();
        if (next === undefined) {
            const done = true;
            const value = null;
            return { done, value };
        }
        const done = false;
        const value = next;
        return { done, value };
    }
}
exports.ReadableAsyncIterator = ReadableAsyncIterator;
class Readable {
    constructor(reader) {
        this.reader = reader;
    }
    [Symbol.iterator]() { return new ReadableIterator(this); }
    [Symbol.asyncIterator]() { return new ReadableAsyncIterator(this); }
    /** Reads the next value from this channel or `undefined` if eof. */
    read() {
        return this.reader.read();
    }
}
exports.Readable = Readable;
class Writable {
    constructor(writer) {
        this.writer = writer;
    }
    /** Writes data to the channel. */
    write(data) {
        return this.writer.write(data);
    }
    /** Ends this channel. */
    end() {
        return this.writer.end();
    }
}
exports.Writable = Writable;
/**
 * Stream<T>
 *
 * An in-memory asynchronous stream of values. Implements both
 * IReadable<T> and IWritable<T> interfaces and is used as a back
 * plane for in memory channels.
 */
class Stream {
    constructor(bounds = 1) {
        this.bounds = bounds;
        this.writers = [];
        this.sinks = [];
        this.queue = [];
    }
    [Symbol.iterator]() { return new ReadableIterator(this); }
    [Symbol.asyncIterator]() { return new ReadableAsyncIterator(this); }
    /** Writes data to the channel. */
    async write(value) {
        if (this.queue.length >= this.bounds) {
            await this.writePause();
            this.readResume(value);
            return;
        }
        this.readResume(value);
    }
    /** Ends this stream. */
    async end() {
        if (this.queue.length >= this.bounds) {
            await this.writePause();
            this.readResume(void 0);
        }
        else {
            this.readResume(void 0);
        }
    }
    /** Reads the next value from this channel or `undefined` if eof. */
    read() {
        this.writeResume();
        if (this.queue.length > 0) {
            return Promise.resolve(this.queue.shift());
        }
        else {
            return this.readPause();
        }
    }
    writePause() {
        return new Promise((resolve, reject) => this.writers.push({ resolve, reject }));
    }
    writeResume() {
        if (this.writers.length > 0) {
            const writer = this.writers.shift();
            writer.resolve(void 0);
        }
    }
    readPause() {
        return new Promise((resolve, reject) => {
            this.sinks.push({ resolve, reject });
        });
    }
    readResume(value) {
        if (this.sinks.length > 0) {
            const sink = this.sinks.shift();
            return sink.resolve(value);
        }
        this.queue.push(value);
    }
}
exports.Stream = Stream;
/**
 * Selects from the given IReadable<T> types and produces a
 * new multiplexed IReadable<T> merging elements for each.
 */
function select(...readers) {
    const { writable: writableHost, readable: readableHost } = channel(1);
    let completed = 0;
    readers.forEach(async (reader) => {
        for await (const value of reader) {
            await writableHost.write(value);
        }
        completed += 1;
        if (completed === readers.length) {
            await writableHost.end();
        }
    });
    return readableHost;
}
exports.select = select;
/** Creates a channel with optional buffering bounds. (default is Number.MAX_SAFE_INTEGER) */
function channel(bound = Number.MAX_SAFE_INTEGER) {
    const stream = new Stream(bound);
    const readable = new Readable(stream);
    const writable = new Writable(stream);
    return { readable, writable };
}
exports.channel = channel;
